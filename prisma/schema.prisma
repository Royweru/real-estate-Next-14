// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}
enum UserRole {
  ADMIN
  USER
  AGENT
}

 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role UserRole @default(USER)
  hashedPwd String
  accounts      Account[]
  listings Listing[]

  @@map("users")
}
 
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Location{
  id String @id @default(cuid())

  county String
  city String

 properties Listing []
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Status{
  id String @id @default(cuid())
  name String

  properties Listing[]
}
model Category{
  id String @id @default(cuid())
  name String

  properties Listing[] 
}

model Type{
  id String @id @default(cuid())
  name String
  
  properties Listing[]
}
model Amenity {
  id          String     @id @default(cuid())
  name        String     @unique
  listings    Listing[]  @relation("ListingToAmenity")
}

model Listing{
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)

  locationId String
  location Location @relation(fields: [locationId],references: [id],onDelete: SetNull)
  
  typeId String
  type Type @relation(fields: [typeId],references: [id],onDelete:Cascade)

  categoryId String
  category Category @relation(fields: [categoryId],references: [id],onDelete:Cascade)

  statusId String
  status Status @relation(fields: [statusId],references: [id],onDelete: SetNull)
  
  title String
  description String?
  images Image[]
  videoUrl String?
  bedrooms Int
  amenities   Amenity[]  @relation("ListingToAmenity")
  priceType    String    @default("rental") // "purchase" or "rental"
  purchasePrice Float?   // Optional purchase price
  rentalPrice   Float?   // Optional rental price
  bathrooms Int
  isFeatured Boolean @default(false)

  area Int
  enquiries Enquiry[]
}

model Image{
  id String @id @default(cuid())
  url String 
  listingId String
  listing Listing @relation(fields:[listingId],references:[id],onDelete:Cascade)

  createdAt DateTime @default(now())
} 


model Enquiry{
  id String @id @default(uuid())

  listingId String
  listing Listing @relation(fields: [listingId],references: [id],onDelete: Cascade)

  name String
  email String
  phone String 
  message String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}